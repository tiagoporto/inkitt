{"version":3,"sources":["components/search/loading.svg","components/search/Search.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","books","searched","loading","data","_this2","react_default","a","createElement","react_selectize_src","placeholder","transitionEnter","transitionLeave","options","onSearchChange","search","length","filter","book","toLowerCase","includes","setState","setTimeout","map","label","value","bind","className","src","Loading","alt","Component","App","components_search_Search","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.50a81ed5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.cd1113bc.svg\";","import React, { Component } from 'react';\nimport { SimpleSelect } from 'react-selectize'\nimport 'react-selectize/dist/index.css'\nimport data from './data.json'\nimport Loading from './loading.svg'\nimport './Search.css'\n\nclass Search extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      books: [],\n      searched: [],\n      loading: false\n    }\n    this.data = data.books\n  }\n\n  render() {\n    return (\n      <div>\n        <SimpleSelect\n          placeholder=\"Search for best sellers\"\n          transitionEnter = {true}\n          transitionLeave = {true}\n          options = {this.state.books}\n          onSearchChange={(search) => {\n            if (search.length > 1) {\n              const books = this.data.filter(book => book.toLowerCase().includes(search.toLowerCase()) && book)\n\n              this.setState({\n                loading: true,\n                books: this.state.searched\n              })\n\n              setTimeout(function () {\n                this.setState({\n                  books: books.map(book => {return {label: book, value: book}}),\n                  searched: books.map(book => {return {label: book, value: book}}),\n                  loading: false\n                })\n              }.bind(this), 1500)\n            } else {\n              this.setState({\n                loading: false,\n                books: []\n              })\n            }\n          }}\n        />\n        <div className={this.state.loading ? 'search-info search-info--active' : 'search-info' }><img src={Loading} alt=\"loading\" /> Loading...</div>\n      </div>\n    )\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport Search from \"./components/search/Search.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">React Search</h1>\n        </header>\n\n        <main className=\"App-main\">\n          <Search />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}